buildscript {
  // Buildscript is evaluated before everything else so we can't use getExtOrDefault
  //def kotlin_version = rootProject.ext.has("kotlinVersion") ? rootProject.ext.get("kotlinVersion") : project.properties["ClientReactNative_kotlinVersion"]
  // FIXME: React-native is stuck on an old kotlin_version, but sdk-android is already on 1.9
  //        To prevent compatibility issues at build time, use the newer kotlin gradle plugin
  //        When the react native gradle plugin updates their kotlin version, we can remove this
  def kotlin_version = "1.9.10"

  repositories {
    mavenCentral()
    google()
  }

  dependencies {
    classpath "com.android.tools.build:gradle:8.1.2"
    // noinspection DifferentKotlinGradleVersion
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
  }
}

def isNewArchitectureEnabled() {
  return rootProject.hasProperty("newArchEnabled") && rootProject.getProperty("newArchEnabled") == "true"
}

apply plugin: "com.android.library"
apply plugin: "kotlin-android"

if (isNewArchitectureEnabled()) {
  apply plugin: "com.facebook.react"
}

def getExtOrDefault(name) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : project.properties["ClientReactNative_" + name]
}

def getExtOrIntegerDefault(name) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : (project.properties["ClientReactNative_" + name]).toInteger()
}

def supportsNamespace() {
  def parsed = com.android.Version.ANDROID_GRADLE_PLUGIN_VERSION.tokenize('.')
  def major = parsed[0].toInteger()
  def minor = parsed[1].toInteger()

  // Namespace support was added in 7.3.0
  return (major == 7 && minor >= 3) || major >= 8
}

android {
  if (supportsNamespace()) {
    namespace "com.tanker.clientreactnative"

    sourceSets {
      main {
        manifest.srcFile "src/main/AndroidManifestNew.xml"
      }
    }
  }

  compileSdkVersion getExtOrIntegerDefault("compileSdkVersion")

  defaultConfig {
    minSdkVersion getExtOrIntegerDefault("minSdkVersion")
    targetSdkVersion getExtOrIntegerDefault("targetSdkVersion")
    buildConfigField "boolean", "IS_NEW_ARCHITECTURE_ENABLED", isNewArchitectureEnabled().toString()

  }

  buildFeatures {
    buildConfig true
  }

  buildTypes {
    release {
      minifyEnabled false
    }
  }

  lintOptions {
    disable "GradleCompatible"
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  sourceSets {
    main {
      if (isNewArchitectureEnabled()) {
        java.srcDirs += [
          "src/newarch",
          // This is needed to build Kotlin project with NewArch enabled
          "${project.buildDir}/generated/source/codegen/java"
        ]
      } else {
        java.srcDirs += ["src/oldarch"]
      }
    }
  }
}

repositories {
  mavenCentral()
  google()
  maven {
    url 'https://storage.googleapis.com/maven.tanker.io'
  }
}

def kotlin_version = getExtOrDefault("kotlinVersion")

dependencies {
  // Huge hack because RN is stuck on an old Kotlin version..
  constraints {
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.8.0") {
      because("kotlin-stdlib-jdk7 is now a part of kotlin-stdlib")
    }
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.8.0") {
      because("kotlin-stdlib-jdk8 is now a part of kotlin-stdlib")
    }
  }

  // For < 0.71, this will be from the local maven repo
  // For > 0.71, this will be replaced by `com.facebook.react:react-android:$version` by react gradle plugin
  //noinspection GradleDynamicVersion
  implementation "com.facebook.react:react-native:+"
  //implementation "com.facebook.react:react-android:0.72.6" // Use this for in IDE Gradle sync..!
  implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

  implementation 'net.java.dev.jna:jna:5.13.0@aar'
  if (file('libs/tanker-bindings.aar').exists()) {
    api 'io.tanker:tanker-bindings@aar'
    implementation 'com.squareup.okhttp3:okhttp:4.9.1'
  } else {
    api 'io.tanker:tanker-bindings:4.0.0@aar'
  }
}

if (isNewArchitectureEnabled()) {
  react {
    jsRootDir = file("../src/")
    libraryName = "ClientReactNative"
    codegenJavaPackageName = "com.tanker.clientreactnative"
  }
}
